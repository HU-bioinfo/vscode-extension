# プロジェクト構造の説明

このドキュメントでは、プロジェクトのディレクトリ構造と各ファイルの役割について説明します。

## ディレクトリ構造

- **R/**: 再利用可能なR関数を定義するディレクトリ
  - `functions.R`: 基本的なデータ処理と可視化の関数

- **data/**: 分析対象のデータファイルを格納するディレクトリ
  - 生データと前処理済みデータを区別して保存することを推奨
  - 大きなデータファイルは`.gitignore`に追加することを検討

- **docs/**: プロジェクトのドキュメントを格納するディレクトリ
  - `project_structure.md`: このファイル
  - プロジェクトの目的、分析手法、結果の解釈などを追加できます

- **results/**: 分析結果を格納するディレクトリ
  - 図表、モデル出力、レポートなどの成果物を保存
  - 再現性のために分析スクリプトとの対応関係を明確にすることを推奨

- **scripts/**: 分析スクリプトを格納するディレクトリ
  - `analysis.R`: サンプル分析スクリプト
  - 各スクリプトは特定の分析タスクに対応させることを推奨

- **tests/**: テストコードを格納するディレクトリ
  - `test_functions.R`: R関数のユニットテスト
  - テスト駆動開発を促進するため、関数の実装前にテストを書くことも検討

## ファイル管理のベストプラクティス

1. **命名規則**:
   - ファイル名には小文字とアンダースコアを使用（例: `data_cleaning.R`）
   - 実行順序が重要な場合は、番号プレフィックスを使用（例: `01_data_import.R`）

2. **ドキュメント**:
   - 各スクリプトの先頭にはスクリプトの目的と使用方法を記述
   - 関数にはRoxygen2スタイルのドキュメントを追加

3. **バージョン管理**:
   - 中間生成物や大きなデータファイルは`.gitignore`に追加
   - コミットメッセージは具体的かつ明確に

4. **依存関係管理**:
   - パッケージのインストールは`renv::install()`を使用
   - 環境の変更後は`renv::snapshot()`を実行して`renv.lock`を更新

## renvの使用方法

renvはRプロジェクトの依存関係を管理するためのツールです。以下の基本的なコマンドを覚えておくと便利です：

- `renv::status()`: 現在の環境状態を確認
- `renv::snapshot()`: 現在の環境をrenv.lockに記録
- `renv::restore()`: renv.lockから環境を復元
- `renv::install("package")`: パッケージをインストール
- `renv::update("package")`: パッケージを更新 