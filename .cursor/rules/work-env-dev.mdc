---
description: 個別のVS Code拡張機能開発ガイドライン
globs: ["**/extensions_src/**"]
alwaysApply: true
---
## ルールの読み込み確認
- このルールを読み込んだら最初に「vs-extension-devに従います！」と発言する

## コマンド使用時のルール
- コマンドがうまく動かないときはカレントディレクトリを確認し、コマンドをまとめずにひとつひとつ分割して実行する

## 拡張機能開発の基本原則
- 単一責任の原則に従う
- ユーザーの作業を妨げない設計
- パフォーマンスとリソース消費の最適化
- 既存のVS Code APIを最大限に活用
- TDDの徹底

## 拡張機能の構成
1. **アクティベーション**: 必要最小限のイベントを使用
2. **コマンド**: 命名規則 `拡張機能名.アクション` に従う
3. **設定項目**: 必要最小限に抑える
4. **WebviewAPI**: 必要な場合のみ使用し、軽量に保つ

## コーディングガイドライン
- コマンド登録は集中管理する
- ビジネスロジックとVS Code API呼び出しを分離
- Disposableパターンを適切に実装
- 設定値アクセスはユーティリティ経由で行う

## UI設計
- VS Codeのデザイン言語に準拠
- アクセシビリティに配慮
- i18n対応（英語・日本語を基本）
- レスポンシブなUI設計

## パフォーマンス最適化
- 重い処理はメインスレッド外で実行
- 遅延ロードとキャッシングを実装
- バックグラウンド処理はキャンセル可能に

## テスト戦略
- **単体テスト**: モジュール単位のテスト
- **E2Eテスト**: ユーザーシナリオ全体のテスト
- **モック戦略**: 
  - VS Code API: Sinonでモック化、テスト環境変数で制御
  - 外部依存: child_process.execなどをモック化
- **テストカバレッジ**: nyc使用、関数90%・行80%・分岐75%以上を目標

## エラー処理
- すべてのエラーを適切にキャッチし通知
- エラーレベルを適切に設定
- ユーザーに具体的な回復アクションを提案

## セキュリティ
- 最小権限の原則に従う
- 機密情報は暗号化して保存
- WebView使用時はCSPを適切に設定

## Gitバージョン管理
- **ブランチ戦略**: GitFlowに準拠（main, develop, feature/*, hotfix/*）
- **コミット規約**: Conventional Commits形式（feat:, fix:, docs:など）
- **バージョン管理**: SemVer準拠、タグ付けとCHANGELOG更新
- **CI/CD**: PRでテスト自動実行、リリースで自動公開

## ディレクトリ構造
```
{拡張機能名}/
├── src/               # ソースコード
├── resources/         # 静的リソース
├── package.json       # マニフェスト
├── CHANGELOG.md       # 変更履歴
└── README.md          # 説明
```

## デバッグ
- OutputChannelを使用したログ出力
- 開発時は詳細ログ、本番は最小限
- デバッグ情報表示機能の実装

## 互換性
- 最小サポートVSCodeバージョンを明確化
- 複数OS対応の確認
- リモート開発環境での動作確認 